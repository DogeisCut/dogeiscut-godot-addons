[gd_resource type="Shader" format=3 uid="uid://culb4kv106c6"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float color : hint_range(0,200);
uniform float fisheye;
uniform float whirl;
uniform float pixelate;
uniform float brightness : hint_range(-100,100);
uniform float ghost : hint_range(0,100);
uniform float mosaic;

const float epsilon = 1e-3;

// Convert an RGB color to Hue, Saturation, and Value.
// All components of input and output are expected to be in the [0,1] range.
vec3 convertRGB2HSV(vec3 rgb)
{
	// Hue calculation has 3 cases, depending on which RGB component is largest, and one of those cases involves a \"mod\"
	// operation. In order to avoid that \"mod\" we split the M==R case in two: one for G<B and one for B>G. The B>G case
	// will be calculated in the negative and fed through abs() in the hue calculation at the end.
	// See also: https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma
	const vec4 hueOffsets = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);

	// temp1.xy = sort B & G (largest first)
	// temp1.z = the hue offset we'll use if it turns out that R is the largest component (M==R)
	// temp1.w = the hue offset we'll use if it turns out that R is not the largest component (M==G or M==B)
	vec4 temp1 = rgb.b > rgb.g ? vec4(rgb.bg, hueOffsets.wz) : vec4(rgb.gb, hueOffsets.xy);

	// temp2.x = the largest component of RGB (\"M\" / \"Max\")
	// temp2.yw = the smaller components of RGB, ordered for the hue calculation (not necessarily sorted by magnitude!)
	// temp2.z = the hue offset we'll use in the hue calculation
	vec4 temp2 = rgb.r > temp1.x ? vec4(rgb.r, temp1.yzx) : vec4(temp1.xyw, rgb.r);

	// m = the smallest component of RGB (\"min\")
	float m = min(temp2.y, temp2.w);

	// Chroma = M - m
	float C = temp2.x - m;

	// Value = M
	float V = temp2.x;

	return vec3(
		abs(temp2.z + (temp2.w - temp2.y) / (6.0 * C + epsilon)), // Hue
		C / (temp2.x + epsilon), // Saturation
		V); // Value
}

vec3 convertHue2RGB(float hue)
{
	float r = abs(hue * 6.0 - 3.0) - 1.0;
	float g = 2.0 - abs(hue * 6.0 - 2.0);
	float b = 2.0 - abs(hue * 6.0 - 4.0);
	return clamp(vec3(r, g, b), 0.0, 1.0);
}

vec3 convertHSV2RGB(vec3 hsv)
{
	vec3 rgb = convertHue2RGB(hsv.x);
	float c = hsv.z * hsv.y;
	return rgb * c + hsv.z - c;
}

void fragment() {
	const vec2 kCenter = vec2(0.5,0.5);
	
	// mosaic
	vec2 texture_coord = UV;
	if (mosaic != 0.0) {
		float real_mosaic = max(1.0, min(round((abs(mosaic) + 10.0) / 10.0), 512.0));
		texture_coord = fract(real_mosaic * texture_coord);
	}
	
	// pixelate
	if (pixelate != 0.0) {
		float real_pixelate = abs(pixelate) / 10.0;
		vec2 pixelTexelSize = (vec2(1.0)/TEXTURE_PIXEL_SIZE) / real_pixelate;
		texture_coord = (floor(texture_coord * pixelTexelSize) + kCenter) / pixelTexelSize;
	}
	
	// whirl
	float real_whirl = -whirl * PI / 180.0;
	const float kRadius = 0.5;
	vec2 offset = texture_coord - kCenter;
	float offsetMagnitude = length(offset);
	float whirlFactor = max(1.0 - (offsetMagnitude / kRadius), 0.0);
	float whirlActual = real_whirl * whirlFactor * whirlFactor;
	float sinWhirl = sin(whirlActual);
	float cosWhirl = cos(whirlActual);
	mat2 rotationMatrix = mat2(
		vec2(cosWhirl, -sinWhirl),
		vec2(sinWhirl, cosWhirl)
	);
	texture_coord = rotationMatrix * offset + kCenter;
	
	// fisheye
	float real_fisheye = max(0.0, (fisheye + 100.0) / 100.0);
	vec2 vec = (texture_coord - kCenter) / kCenter;
	float vecLength = length(vec);
	float r = pow(min(vecLength, 1.0), real_fisheye) * max(1.0, vecLength);
	vec2 unit = vec / vecLength;
	texture_coord = kCenter + r * unit * kCenter;
	
	COLOR = texture(TEXTURE, texture_coord);
	
	// color effect
	float real_color = mod(color/200.0, 1.0);
	if (color != 0.0) {
		vec3 hsv = convertRGB2HSV(COLOR.rgb);
		
		const float minLightness = 0.11 / 2.0;
		const float minSaturation = 0.09;
		if (hsv.z < minLightness) hsv = vec3(0.0, 1.0, minLightness);
		else if (hsv.y < minSaturation) hsv = vec3(0.0, minSaturation, hsv.z);
		
		hsv.x = mod(hsv.x + real_color, 1.0);
		if (hsv.x < 0.0) hsv.x += 1.0;
		
		COLOR.rgb = convertHSV2RGB(hsv);
	}
	
	// brightness effect
	COLOR.rgb += brightness/100.0;
	
	//ghost effect
	COLOR.a = COLOR.a * (100.0-ghost)/100.0;
	
}"
